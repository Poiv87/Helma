<<<<<<< HEAD
import getSideChannelList from 'side-channel-list';
import getSideChannelMap from 'side-channel-map';
import getSideChannelWeakMap from 'side-channel-weakmap';

declare namespace getSideChannel {
	type Channel<K, V> =
		| getSideChannelList.Channel<K, V>
		| ReturnType<Exclude<typeof getSideChannelMap<K, V>, false>>
		| ReturnType<Exclude<typeof getSideChannelWeakMap<K, V>, false>>;
}

declare function getSideChannel<K, V>(): getSideChannel.Channel<K, V>;
=======
declare namespace getSideChannel {
	type Key = unknown;
	type ListNode<T> = {
		key: Key;
		next: ListNode<T>;
		value: T;
	};
	type RootNode<T> = {
		key: object;
		next: null | ListNode<T>;
	};
	function listGetNode<T>(list: RootNode<T>, key: ListNode<T>['key']): ListNode<T> | void;
	function listGet<T>(objects: RootNode<T>, key: ListNode<T>['key']): T | void;
	function listSet<T>(objects: RootNode<T>, key: ListNode<T>['key'], value: T): void;
	function listHas<T>(objects: RootNode<T>, key: ListNode<T>['key']): boolean;

	type Channel = {
		assert: (key: Key) => void;
		has: (key: Key) => boolean;
		get: <T>(key: Key) => T;
		set: <T>(key: Key, value: T) => void;
	}
}

declare function getSideChannel(): getSideChannel.Channel;
>>>>>>> 44b384faa7aee388ab8f85812b82bbabe31425f9

export = getSideChannel;
